import org.openhab.model.script.actions.Timer;

var Timer HeatingBoostTimer = null
var Timer HeatingBoostRemTime = null
var Number HeatingBoostTimeInitial = 10
var Number HeatingBoostTimeInitialUI = 10
var String HeatingPreviousMode = "OFF"
var Timer Heating2Timer = null

var Timer HotWaterBoostTimer = null
var Timer HotWaterBoostRemTime = null
var Number HotWaterBoostTimeInitial = 10
var Number HotWaterBoostTimeInitialUI = 10
var String HotWaterPreviousMode = "OFF"

var Timer HumiBoostTimer = null
var Timer HumiBoostRemTime = null
var Number HumiBoostTimeInitial = 10
var Number HumiBoostTimeInitialUI = 10
var String HumiPreviousMode = "OFF"
//var Timer HumiTopicTimer = null

rule "Initialisation"
when
    System started
then
    MainSwitch.sendCommand("OFF");
    HeatingMode.sendCommand("OFF");
    HotWaterMode.sendCommand("OFF");
    HumidityMode.sendCommand("OFF");
    Heating2.sendCommand("OFF");
//    HumiTopic.sendCommand("0");
    if (TempUnit.state == "C") {
      if((TempSetpoint.state == NULL) || (TempSetpoint.state == UNDEF)) postUpdate(TempSetpoint, 18);
      if((TempSetpointC.state == NULL) || (TempSetpointC.state == UNDEF)) postUpdate(TempSetpointC, 18);
      if(TempSetpoint.state > 40) postUpdate(TempSetpoint, 18);
      if(TempSetpointC.state > 40) postUpdate(TempSetpointC, 18);
    } else {
      if((TempSetpoint.state == NULL) || (TempSetpoint.state == UNDEF)) postUpdate(TempSetpoint, 70);
      if((TempSetpointF.state == NULL) || (TempSetpointF.state == UNDEF)) postUpdate(TempSetpointF, 70);
      if(TempSetpoint.state < 32) postUpdate(TempSetpoint, 70);
      if(TempSetpointF.state < 32) postUpdate(TempSetpointF, 70);
    }
    if((HeatingBoostTime.state == NULL) || (HeatingBoostTime.state == UNDEF)) HeatingBoostTime.sendCommand(10);
    if((HumiSetpoint.state == NULL) || (HumiSetpoint.state == UNDEF)) HumiSetpoint.sendCommand(50);
    if((HotWaterBoostTime.state == NULL) || (HotWaterBoostTime.state == UNDEF)) HotWaterBoostTime.sendCommand(10);
    if((HumiBoostTime.state == NULL) || (HumiBoostTime.state == UNDEF)) HumiBoostTime.sendCommand(10);
    postUpdate(PreviousTempReading, 0);
    postUpdate(PreviousHumiReading, 0);
    Heating2Time.sendCommand(0);
    Heating2Delta.sendCommand(0);
    Network_WLAN_IP.sendCommand(executeCommandLine("/home/pi/scripts/getwlan0ip.sh",60000));
    Network_SSID.sendCommand(executeCommandLine("/home/pi/scripts/getssid.sh",60000));
    Network_WLAN_INFO.sendCommand(executeCommandLine("/home/pi/scripts/getwifiinfo.sh",60000));
    Network_WLAN_MAC.sendCommand(executeCommandLine("/home/pi/scripts/getwlan0mac.sh",60000));
    System_CPU_TEMP.sendCommand(executeCommandLine("/home/pi/scripts/getcputemperature.sh",60000));
    System_CPU_LOAD.sendCommand(executeCommandLine("/home/pi/scripts/getcpuload.sh",60000));
    System_Used_Space.sendCommand(executeCommandLine("/home/pi/scripts/getuseddiskspace.sh",60000));
    TempUnit.sendCommand(executeCommandLine("/home/pi/scripts/gettempunit.sh",60000));
    SystemType.sendCommand(executeCommandLine("/home/pi/scripts/getsystemtype.sh",60000));
    HumidityType.sendCommand(executeCommandLine("/home/pi/scripts/gethumiditymode.sh",60000));
end

rule "TempSetpoint Proxy Set"
when
    Item TempSetpointF changed or
    Item TempSetpointC changed
then
    if (TempUnit.state == "C") {
      TempSetpoint.sendCommand(TempSetpointC.state as DecimalType)
    } else {
      TempSetpoint.sendCommand(TempSetpointF.state as DecimalType)
    }
end

rule "TempSetpoint Proxy Get"
when
    Item TempSetpoint changed
then
    if (TempUnit.state == "C") {
      postUpdate(TempSetpointC, (TempSetpoint.state as DecimalType))
    } else {
      postUpdate(TempSetpointF, (TempSetpoint.state as DecimalType))
    }
end

rule "MyTempProxy Proxy Set"
when
    Item MyTempProxyF changed or
    Item MyTempProxyC changed
then
    if (TempUnit.state == "C") {
      MyTempProxy.sendCommand(MyTempProxyC.state as DecimalType)
    } else {
      MyTempProxy.sendCommand(MyTempProxyF.state as DecimalType)
    }
end

rule "MyTempProxy Proxy Get"
when
    Item MyTempProxy changed
then
    if (TempUnit.state == "C") {
      MyTempProxyC.sendCommand(MyTempProxy.state as DecimalType)
    } else {
      MyTempProxyF.sendCommand(MyTempProxy.state as DecimalType)
    }
end

rule "HeatingPin changed"
when
    Item HeatingPin changed
then
    switch(HeatingPin.state) {
      case ON: {
        Pin23.sendCommand(ON)
        //HeatingPinTopic.sendCommand(ON)
        logInfo("Default","HeatingPin set to ON.")
      }
      case OFF: {
        Pin23.sendCommand(OFF)
        //HeatingPinTopic.sendCommand(OFF)
        logInfo("Default","HeatingPin set to OFF.")
      }
    }
end

rule "Heating2Pin changed"
when
    Item Heating2Pin changed
then
    if (Heating2.state.toString == "ON") {
      switch(Heating2Pin.state) {
        case ON: {
          Pin16.sendCommand(ON)
          //Heating2PinTopic.sendCommand(ON)
          logInfo("Default","Heating2Pin set to ON.")
        }
        case OFF: {
          Pin16.sendCommand(OFF)
          //Heating2PinTopic.sendCommand(OFF)
          logInfo("Default","Heating2Pin set to OFF.")
        }
      }
    }
end

rule "HotWaterPin changed"
when
    Item HotWaterPin changed
then
    switch(HotWaterPin.state) {
      case ON: {
        Pin12.sendCommand(ON)
        //HotWaterPinTopic.sendCommand(ON)
        logInfo("Default","HotWaterPin set to ON.")
      }
      case OFF: {
        Pin12.sendCommand(OFF)
        //HotWaterPinTopic.sendCommand(OFF)
        logInfo("Default","HotWaterPin set to OFF.")
      }
    }
end

rule "HumidityPin changed"
when
    Item HumidityPin changed
then
    switch(HumidityPin.state) {
      case ON: {
        Pin18.sendCommand(ON)
        //HumidityPinTopic.sendCommand(ON)
        logInfo("Default","HumidityPin set to ON.")
      }
      case OFF: {
        Pin18.sendCommand(OFF)
        //HumidityPinTopic.sendCommand(OFF)
        logInfo("Default","HumidityPin set to OFF.")
      }
    }
end

rule "convertproxy"
when
  Item MyTemp changed or
  Item MyHumi changed// or
//  Item MyPressure changed
then
  //Additional initialisation checks
  if(PreviousTempReading.state == NULL) postUpdate(PreviousTempReading, 0)
  if(PreviousHumiReading.state == NULL) postUpdate(PreviousHumiReading, 0)
  if(TempUnit.state == NULL) TempUnit.postUpdate(executeCommandLine("/home/pi/scripts/gettempunit.sh",60000))
  if(HumidityType.state == NULL) HumidityType.postUpdate(executeCommandLine("/home/pi/scripts/gethumiditymode.sh",60000))

  if (TempUnit.state == "C") {
    if((TempSetpoint.state == NULL) || (TempSetpoint.state == UNDEF)) TempSetpoint.sendCommand(18.0)
    //if((TempSetpointC.state == NULL) || (TempSetpointC.state == UNDEF)) postUpdate(TempSetpointC, 18.0)
  } else {
    if((TempSetpoint.state == NULL) || (TempSetpoint.state == UNDEF)) TempSetpoint.sendCommand(70)
    //if((TempSetpointF.state == NULL) || (TempSetpointF.state == UNDEF)) postUpdate(TempSetpointF, 70)
  }

  if((HumiSetpoint.state == NULL) || (HumiSetpoint.state == UNDEF)) HumiSetpoint.postUpdate(50.0)
  if((HeatingBoostTime.state == NULL) || (HeatingBoostTime.state == UNDEF)) HeatingBoostTime.postUpdate(10.0)
  if((HotWaterBoostTime.state == NULL) || (HotWaterBoostTime.state == UNDEF)) HotWaterBoostTime.postUpdate(10.0)
  if((HumiBoostTime.state == NULL) || (HumiBoostTime.state == UNDEF)) HumiBoostTime.postUpdate(10.0)
  if (Heating2.state.toString == "ON") {
    if((Heating2Time.state == NULL) || (Heating2Time.state == UNDEF)) Heating2Time.postUpdate(0)
    if((Heating2Delta.state == NULL) || (Heating2Delta.state == UNDEF)) Heating2Delta.postUpdate(0)
  }
  MyTempProxy.sendCommand(Double::parseDouble(MyTemp.state.toString))
  MyHumiProxy.sendCommand(Double::parseDouble(MyHumi.state.toString))
  //MyPressureProxy.sendCommand(Double::parseDouble(MyPressure.state.toString))

  if (TempUnit.state == "C") {
    if ((Double::parseDouble(MyTemp.state.toString) < (Double::parseDouble(PreviousTempReading.state.toString)) - 0.2) || (Double::parseDouble(MyTemp.state.toString) > (Double::parseDouble(PreviousTempReading.state.toString)) + 0.2)) {
      PreviousTempReading.postUpdate(Double::parseDouble(MyTemp.state.toString))
    }
  } else {
    PreviousTempReading.postUpdate(Double::parseDouble(MyTemp.state.toString))
  }

  if ((Double::parseDouble(MyHumi.state.toString) < (Double::parseDouble(PreviousHumiReading.state.toString)) - 3) || (Double::parseDouble(MyHumi.state.toString) > (Double::parseDouble(PreviousHumiReading.state.toString)) + 3)) {
    PreviousHumiReading.postUpdate(Double::parseDouble(MyHumi.state.toString))
  }
  //PreviousPressureReading.postUpdate(Double::parseDouble(MyPressure.state.toString))
end

rule "checkcurrtemp"
when
  Item TempSetpoint changed or
  Item PreviousTempReading changed
then
  if ((MyTempProxy.state < TempSetpoint.state) &&
    ((HeatingMode.state=="ON") || (HeatingMode.state=="Boost"))) {
    HeatingPin.sendCommand(ON)

    if (Heating2.state.toString == "ON") {
      /*****  SECOND STAGE HEATING START  *****/
      //Only if Heating2InitialTemp is 0 update it

      logInfo("Default","Starting Heating2Timer timer to " + (Heating2Time.state as DecimalType).intValue + " minutes.")
      Heating2Timer = createTimer(now.plusMinutes((Heating2Time.state as DecimalType).intValue)) [|
        if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) < ((Double::parseDouble(TempSetpoint.state.toString)))) {
          //If it is still cold enough start 2nd stage
          Heating2Pin.sendCommand(ON)
        }
      ]
      if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) >= ((Double::parseDouble(TempSetpoint.state.toString)))) {
        //2nd stage is not needed
        Heating2Pin.sendCommand(OFF)
      }
      /*****  SECOND STAGE HEATING END  *****/
    }
  } else {
    HeatingPin.sendCommand(OFF)
    if (Heating2.state.toString == "ON") {
      Heating2Pin.sendCommand(OFF)
      //Heating2InitialTemp.sendCommand(0)
      if (Heating2Timer !== null) {
        Heating2Timer.cancel
        Heating2Timer = null   // reset the timer
      }
    }
  }
end

rule "checkcurrhumi"
when
  Item HumiSetpoint changed or
  Item PreviousHumiReading changed
then
  if (((HumidityType.state == "Dehumidify") && (MyHumiProxy.state < HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state > HumiSetpoint.state))){
    HumidityPin.sendCommand(OFF)
  } else if ((((HumidityType.state == "Dehumidify") && (MyHumiProxy.state > HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state < HumiSetpoint.state))) &&
      ((HumidityMode.state=="ON") || (HumidityMode.state=="Boost"))) {
    HumidityPin.sendCommand(ON)
  }
end

rule "Heating Mode"
when
    Item HeatingMode changed
then
    if(HeatingBoostTime.state == NULL) postUpdate(HeatingBoostTime, 10)
    switch(HeatingMode.state) {
      case "ON": {
        if (MyTempProxy.state < TempSetpoint.state) {
          HeatingPin.sendCommand(ON)

          if (Heating2.state.toString == "ON") {
            /*****  SECOND STAGE HEATING START  *****/
            //Only if Heating2InitialTemp is 0 update it
            //logInfo("Default","Heating2InitialTemp was found set to " + (Double::parseDouble(Heating2InitialTemp.state.toString)))
            //if((Double::parseDouble(Heating2InitialTemp.state.toString)) == 0) {
              //Heating2InitialTemp.postUpdate(Double::parseDouble(MyTempProxy.state.toString))
              //logInfo("Default","Heating2InitialTemp was 0 and is now set to " + (Double::parseDouble(Heating2InitialTemp.state.toString)))

              logInfo("Default","Starting Heating2Timer timer to " + (Heating2Time.state as DecimalType).intValue + " minutes.")
              Heating2Timer = createTimer(now.plusMinutes((Heating2Time.state as DecimalType).intValue)) [|
                if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) < ((Double::parseDouble(TempSetpoint.state.toString)))) {
                  //If it is still cold enough start 2nd stage
                  Heating2Pin.sendCommand(ON)
                }
              ]
            //}
            if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) >= ((Double::parseDouble(TempSetpoint.state.toString)))) {
              //2nd stage is not needed
              Heating2Pin.sendCommand(OFF)
            }
            /*****  SECOND STAGE HEATING END  *****/
          }
        }
        MainSwitch.sendCommand("ON")
        HeatingPreviousMode="ON"
      }
      case "OFF": {
        HeatingPin.sendCommand(OFF)
        if (Heating2.state.toString == "ON") {
          Heating2Pin.sendCommand(OFF)
          //Heating2InitialTemp.sendCommand(0)
          if (Heating2Timer !== null) {
            Heating2Timer.cancel
            Heating2Timer = null   // reset the timer
          }
        }
        HeatingPreviousMode="OFF"
      }
      case "Schedule": {
        HeatingPin.sendCommand(OFF)
        if (Heating2.state.toString == "ON") {
          Heating2Pin.sendCommand(OFF)
          //Heating2InitialTemp.sendCommand(0)
          if (Heating2Timer !== null) {
            Heating2Timer.cancel
            Heating2Timer = null   // reset the timer
          }
        }
        MainSwitch.sendCommand("ON")
        HeatingPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

rule "Hot Water Mode"
when
    Item HotWaterMode changed
then
    if(HotWaterBoostTime.state == NULL) postUpdate(HotWaterBoostTime, 10)
    switch(HotWaterMode.state) {
      case "ON": {
        HotWaterPin.sendCommand(ON)
        MainSwitch.sendCommand("ON")
        HotWaterPreviousMode="ON"
      }
      case "OFF": {
        HotWaterPin.sendCommand(OFF)
        HotWaterPreviousMode="OFF"
      }
      case "Schedule": {
        HotWaterPin.sendCommand(OFF)
        MainSwitch.sendCommand("ON")
        HotWaterPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

rule "Humidity Mode"
when
    Item HumidityMode changed
then
    if(HumiBoostTime.state == NULL) postUpdate(HumiBoostTime, 10)
    switch(HumidityMode.state) {
      case "ON": {
        if (((HumidityType.state == "Dehumidify") && (MyHumiProxy.state > HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state < HumiSetpoint.state))) {
          HumidityPin.sendCommand(ON)
        }
        MainSwitch.sendCommand("ON")
        HumiPreviousMode="ON"
      }
      case "OFF": {
        HumidityPin.sendCommand(OFF)
        HumiPreviousMode="OFF"
      }
      case "Schedule": {
        HumidityPin.sendCommand(OFF)
        MainSwitch.sendCommand("ON")
        HumiPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

// rule "HumidityPin changed"
// when
//     Item HumidityPin changed
// then
//     switch(HumidityPin.state) {
//       case ON: {
//         HumiTopic.sendCommand("1")
//       }
//       case OFF: {
//         HumiTopicTimer = createTimer(now.plusSeconds(5), [|
//             HumiTopicTimer = null
//         ])
//         HumiTopic.sendCommand("0")
//       }
//     }
// end

// rule "Humidity Topic changed"
// when
//     Item HumiTopic changed
// then
//     switch(HumiTopic.state) {
//       case "1",
//       case "ON": {
//         if (HumidityMode.state != "Boost") {
//           HumidityMode.sendCommand("ON")
//         }
//         if (((HumidityType.state == "Dehumidify") && (MyHumiProxy.state < HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state > HumiSetpoint.state))) {
//           HumiTopicTimer = createTimer(now.plusSeconds(5), [|
//               HumiTopicTimer = null
//           ])
//           HumidityPin.sendCommand(OFF)
//         }
//       }
//       case "0",
//       case "OFF": {
//         if (HumiTopicTimer === null) {
//           HumidityMode.sendCommand("OFF")
//         }
//       }
//     }
// end

rule "MainSwitch"
when
    Item MainSwitch changed
then
    switch(MainSwitch.state) {
      case ON:{
        // Do nothing
      }
      case OFF:{
        if (HeatingMode.state == "ON") {
          HeatingPreviousMode = "ON"
          HeatingMode.sendCommand("OFF")
        } else if (HeatingMode.state == "Schedule") {
          HeatingPreviousMode="Schedule"
          HeatingMode.sendCommand("OFF")
        } else if (HeatingMode.state == "Boost") {
          HeatingPreviousMode="Boost"
          HeatingMode.sendCommand("OFF")
        }

        if (HotWaterMode.state == "ON") {
          HotWaterPreviousMode="ON"
          HotWaterMode.sendCommand("OFF")
        } else if (HotWaterMode.state == "Schedule") {
          HotWaterPreviousMode="Schedule"
          HotWaterMode.sendCommand("OFF")
        } else if (HotWaterMode.state == "Boost") {
          HotWaterPreviousMode="Boost"
          HotWaterMode.sendCommand("OFF")
        }

        if (HumidityMode.state == "ON") {
          HumiPreviousMode = "ON"
          HumidityMode.sendCommand("OFF")
        } else if (HumidityMode.state == "Schedule") {
          HumiPreviousMode="Schedule"
          HumidityMode.sendCommand("OFF")
        } else if (HumidityMode.state == "Boost") {
          HumiPreviousMode="Boost"
          HumidityMode.sendCommand("OFF")
        }
      }
    }
end

rule "HeatingBoostTime changed"
when
    Item HeatingBoostTime changed
then
    HeatingBoostTimeInitial = (HeatingBoostTime.state as DecimalType).intValue
    if (HeatingMode.state == "Boost") {
      if (HeatingBoostTimer !== null) {
        HeatingBoostTimer.reschedule(now.plusMinutes((HeatingBoostTimeInitial).intValue))
      }
      if (HeatingBoostRemTime !== null) {
        HeatingBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
end

rule "Boost Heating"
when
    Item HeatingMode changed to Boost
then
    if((HeatingBoostTime.state == NULL) || (HeatingBoostTime.state == UNDEF)) HeatingBoostTime.sendCommand(10)
    if (HeatingBoostTimer !== null) {
      HeatingBoostTimer.cancel
      HeatingBoostTimer = null   // reset the timer
    }
    if (HeatingBoostRemTime !== null) {
      HeatingBoostRemTime.cancel
      HeatingBoostRemTime = null   // reset the timer
    }

    HeatingBoostTimeInitial = (HeatingBoostTime.state as DecimalType).intValue;
    HeatingBoostTimeInitialUI = HeatingBoostTimeInitial
//    sendNotification("your-myopenhab-account@email.com", "Heating started for " + HeatingBoostTimeInitial + " minutes")


    if (MyTempProxy.state > TempSetpoint.state){
      HeatingPin.sendCommand(OFF)
      if (Heating2.state.toString == "ON") {
        Heating2Pin.sendCommand(OFF)
        //Heating2InitialTemp.sendCommand(0)
        if (Heating2Timer !== null) {
          Heating2Timer.cancel
          Heating2Timer = null   // reset the timer
        }
      }
    } else if (MyTempProxy.state < TempSetpoint.state) {
      HeatingPin.sendCommand(ON)

      if (Heating2.state.toString == "ON") {
        /*****  SECOND STAGE HEATING START  *****/
        //Only if Heating2InitialTemp is 0 update it
        //logInfo("Default","Heating2InitialTemp was found set to " + (Double::parseDouble(Heating2InitialTemp.state.toString)))
        //if((Double::parseDouble(Heating2InitialTemp.state.toString)) == 0) {
          //Heating2InitialTemp.postUpdate(Double::parseDouble(MyTempProxy.state.toString))
          //logInfo("Default","Heating2InitialTemp was 0 and is now set to " + (Double::parseDouble(Heating2InitialTemp.state.toString)))

          logInfo("Default","Starting Heating2Timer timer to " + (Heating2Time.state as DecimalType).intValue + " minutes.")
          Heating2Timer = createTimer(now.plusMinutes((Heating2Time.state as DecimalType).intValue)) [|
            if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) < ((Double::parseDouble(TempSetpoint.state.toString)))) {
              //If it is still cold enough start 2nd stage
              Heating2Pin.sendCommand(ON)
            }
          ]
        //}
        if (((Double::parseDouble(MyTempProxy.state.toString)) + (Double::parseDouble(Heating2Delta.state.toString))) >= ((Double::parseDouble(TempSetpoint.state.toString)))) {
          //2nd stage is not needed
          Heating2Pin.sendCommand(OFF)
        }
        /*****  SECOND STAGE HEATING END  *****/
      }
    }

    HeatingBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HeatingBoostTime.sendCommand((HeatingBoostTime.state as DecimalType).intValue -1)
        HeatingBoostRemTime.reschedule(now.plusMinutes(1))
    ]

    logInfo("Default","Setting heating timer to " + (HeatingBoostTime.state as DecimalType).intValue)
    HeatingBoostTimer = createTimer(now.plusMinutes(HeatingBoostTimeInitial)) [|
        if (HeatingBoostRemTime !== null) {
          HeatingBoostRemTime.cancel
          HeatingBoostRemTime = null   // reset the timer
        }
        HeatingMode.sendCommand(HeatingPreviousMode)
        HeatingBoostTimer = null   // reset the timer
    ]

end

rule "Boost Heating Ended"
when
    Item HeatingMode changed from Boost
then
    logInfo("Default","Heating Boost finished")
//    sendNotification("your-myopenhab-account@email.com", "Your house should be warm now ("+MyTempProxy.state+")")
    if (((HeatingBoostTime.state as DecimalType).intValue < 10) || (HeatingBoostTimeInitial < 10)) {
      HeatingBoostTimeInitial = 10
    }
    HeatingBoostTime.sendCommand(HeatingBoostTimeInitialUI)

    logInfo("Timer", "Clearing Heating timers...")
    if (HeatingBoostTimer !== null) {
      HeatingBoostTimer.cancel()
      HeatingBoostTimer = null
      logInfo("Timer", "HeatingBoostTimer cleared")
    }

    if (HeatingBoostRemTime !== null) {
      HeatingBoostRemTime.cancel()
      HeatingBoostRemTime = null
      logInfo("Timer", "HeatingBoostRemTime cleared")
    }
end

rule "HotWaterBoostTime changed"
when
    Item HotWaterBoostTime changed
then
    HotWaterBoostTimeInitial = (HotWaterBoostTime.state as DecimalType).intValue
    if (HotWaterMode.state == "Boost") {
      if (HotWaterBoostTimer !== null) {
        HotWaterBoostTimer.reschedule(now.plusMinutes((HotWaterBoostTimeInitial).intValue))
      }
      if (HotWaterBoostRemTime !== null) {
        HotWaterBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
end

rule "Boost Hot Water"
when
    Item HotWaterMode changed to Boost
then
    if((HotWaterBoostTime.state == NULL) || (HotWaterBoostTime.state == UNDEF)) HotWaterBoostTime.sendCommand(10)
    if (HotWaterBoostTimer !== null) {
      HotWaterBoostTimer.cancel
      HotWaterBoostTimer = null   // reset the timer
    }
    if (HotWaterBoostRemTime !== null) {
      HotWaterBoostRemTime.cancel
      HotWaterBoostRemTime = null   // reset the timer
    }

    HotWaterBoostTimeInitial = (HotWaterBoostTime.state as DecimalType).intValue;
    HotWaterBoostTimeInitialUI = HotWaterBoostTimeInitial
    HotWaterPin.sendCommand(ON)
//    sendNotification("your-myopenhab-account@email.com", "Hot water started for " + HotWaterBoostTimeInitial + " minutes")


    HotWaterBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HotWaterBoostTime.sendCommand((HotWaterBoostTime.state as DecimalType).intValue -1)
        HotWaterBoostRemTime.reschedule(now.plusMinutes(1))
    ]

    logInfo("Default","Setting hot water timer to " + HotWaterBoostTimeInitial)
    HotWaterBoostTimer = createTimer(now.plusMinutes(HotWaterBoostTimeInitial)) [|
        if (HotWaterBoostRemTime !== null) {
          HotWaterBoostRemTime.cancel
          HotWaterBoostRemTime = null   // reset the timer
        }
        HotWaterMode.sendCommand(HotWaterPreviousMode)
        HotWaterBoostTimer = null   // reset the timer
//        sendNotification("your-myopenhab-account@email.com", "Hot Water is ready!")
    ]

end

rule "Boost Hot Water Ended"
when
    Item HotWaterMode changed from Boost
then
    logInfo("Default","Hot Water Boost finished")
    if (((HotWaterBoostTime.state as DecimalType).intValue < 10) || (HotWaterBoostTimeInitial < 10)) {
      HotWaterBoostTimeInitial = 10
    }
    HotWaterBoostTime.sendCommand(HotWaterBoostTimeInitialUI)

    logInfo("Timer", "Clearing Hot Water timers...")
    if (HotWaterBoostTimer !== null) {
      HotWaterBoostTimer.cancel()
      HotWaterBoostTimer = null
      logInfo("Timer", "HotWaterBoostTimer cleared")
    }

    if (HotWaterBoostRemTime !== null) {
      HotWaterBoostRemTime.cancel()
      HotWaterBoostRemTime = null
      logInfo("Timer", "HotWaterBoostRemTime cleared")
    }
end

rule "HumiBoostTime changed"
when
    Item HumiBoostTime changed
then
    HumiBoostTimeInitial = (HumiBoostTime.state as DecimalType).intValue
    if (HumidityMode.state == "Boost") {
      if (HumiBoostTimer !== null) {
        HumiBoostTimer.reschedule(now.plusMinutes((HumiBoostTimeInitial).intValue))
      }
      if (HumiBoostRemTime !== null) {
        HumiBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
end

rule "Boost Humidity"
when
    Item HumidityMode changed to Boost
then
    if((HumiBoostTime.state == NULL) || (HumiBoostTime.state == UNDEF)) HumiBoostTime.sendCommand(10)
    if (HumiBoostTimer !== null) {
      HumiBoostTimer.cancel
      HumiBoostTimer = null   // reset the timer
    }
    if (HumiBoostRemTime !== null) {
      HumiBoostRemTime.cancel
      HumiBoostRemTime = null   // reset the timer
    }

    HumiBoostTimeInitial = (HumiBoostTime.state as DecimalType).intValue;
    HumiBoostTimeInitialUI = HumiBoostTimeInitial

    if (((HumidityType.state == "Dehumidify") && (MyHumiProxy.state < HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state > HumiSetpoint.state))) {
      HumidityPin.sendCommand(OFF)
    } else if (((HumidityType.state == "Dehumidify") && (MyHumiProxy.state > HumiSetpoint.state)) || ((HumidityType.state == "Humidify") && (MyHumiProxy.state < HumiSetpoint.state))) {
      HumidityPin.sendCommand(ON)
    }

    HumiBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HumiBoostTime.sendCommand((HumiBoostTime.state as DecimalType).intValue -1)
        HumiBoostRemTime.reschedule(now.plusMinutes(1))
    ]

    logInfo("Default","Setting humidity timer to " + HumiBoostTimeInitial)
    HumiBoostTimer = createTimer(now.plusMinutes(HumiBoostTimeInitial)) [|
        if (HumiBoostRemTime !== null) {
          HumiBoostRemTime.cancel
          HumiBoostRemTime = null   // reset the timer
        }
        HumidityMode.sendCommand(HumiPreviousMode)
        HumiBoostTimer = null   // reset the timer
//        sendNotification("your-myopenhab-account@email.com", "Desired humidity reached!")
    ]

end

rule "Boost Humidity Ended"
when
    Item HumidityMode changed from Boost
then
    logInfo("Default","Humidity Boost finished")
    if (((HumiBoostTime.state as DecimalType).intValue < 10) || (HumiBoostTimeInitial < 10)) {
      HumiBoostTimeInitial = 10
    }
    HumiBoostTime.sendCommand(HumiBoostTimeInitialUI)

    logInfo("Timer", "Clearing Humidity timers...")
    if (HumiBoostTimer !== null) {
      HumiBoostTimer.cancel()
      HumiBoostTimer = null
      logInfo("Timer", "HumiBoostTimer cleared")
    }

    if (HumiBoostRemTime !== null) {
      HumiBoostRemTime.cancel()
      HumiBoostRemTime = null
      logInfo("Timer", "HumiBoostRemTime cleared")
    }
end

rule "TempUnitChanged"
when
  Item TempUnit changed
then
    MainSwitch.sendCommand("OFF");
    HeatingMode.sendCommand("OFF");
    HotWaterMode.sendCommand("OFF");
    HumidityMode.sendCommand("OFF");
    if (TempUnit.state == "F") {
      logInfo("Default","F Selected")
      //C2F.sendCommand("ON")
      var String results = executeCommandLine("/home/pi/scripts/C2F.sh",1000)
      results = results + "" // hide validation issue
      results = ""
      //postUpdate(TempSetpoint, 70)
      TempSetpoint.sendCommand(70)
    } else {
      logInfo("Default","C Selected")
      //F2C.sendCommand("ON")
      var String results = executeCommandLine("/home/pi/scripts/F2C.sh",1000)
      results = results + "" // hide validation issue
      results = ""
      //postUpdate(TempSetpoint, 18)
      TempSetpoint.sendCommand(18)
    }
    System_CPU_TEMP.sendCommand(executeCommandLine("/home/pi/scripts/getcputemperature.sh",60000));
end

rule "HumidityTypeChanged"
when
  Item HumidityType changed
then
    HumidityMode.sendCommand("OFF");
    HumiSetpoint.sendCommand(50);
    HumiBoostTime.sendCommand(10);
end

rule "SystemTypeChanged"
when
  Item SystemType changed from EU or
  Item SystemType changed from US
then
    MainSwitch.sendCommand("OFF");
    HeatingMode.sendCommand("OFF");
    HotWaterMode.sendCommand("OFF");
    HumidityMode.sendCommand("OFF");

    HeatingBoostTime.sendCommand(10);
    HotWaterBoostTime.sendCommand(10);
    HumiBoostTime.sendCommand(10);
    HumiSetpoint.sendCommand(50);

    if (TempUnit.state == "F") {
      //postUpdate(TempSetpoint, 70)
      TempSetpoint.sendCommand(70)
    } else {
      //postUpdate(TempSetpoint, 18)
      TempSetpoint.sendCommand(18)
    }

    if (SystemType.state == "EU") {
      var String results = executeCommandLine("sudo sed -i 's/US/EU/g' /home/pi/scripts/systemtype",1000)
      results = results + "" // hide validation issue
      results = ""
      results = executeCommandLine("sudo cp /home/pi/scripts/generic.rules /etc/openhab2/rules/default.rules",1000)
      results = results + "" // hide validation issue
      results = ""
      logInfo("Default","Generic enabled")
    } else {
      var String results = executeCommandLine("sudo sed -i 's/EU/US/g' /home/pi/scripts/systemtype",1000)
      results = results + "" // hide validation issue
      results = ""
      results = executeCommandLine("sudo cp /home/pi/scripts/hvac.rules /etc/openhab2/rules/default.rules",1000)
      results = results + "" // hide validation issue
      results = ""
      logInfo("Default","HVAC enabled")
    }
    logInfo("Default","Rebooting...")
    results = executeCommandLine("sudo reboot",1000)
end

rule "Timezone Set"
when
  Item System_TZ_Set changed
then
  var String results = executeCommandLine("sudo /home/pi/scripts/settz.sh " + System_TZ_Set.state.toString,5000)
  results = results + "" // hide validation issue
  results = ""
  System_TZ.postUpdate(executeCommandLine("/home/pi/scripts/gettz.sh",5000))
end

rule "RebootButtonChanged"
when
  Item RebootButton received command ON
then
    logInfo("Default","RebootButton Selected")
    RebootButton.postUpdate("OFF")
    RebootCommand.sendCommand("ON")
end

rule "ShutdownButtonChanged"
when
  Item ShutdownButton received command ON
then
    logInfo("Default","ShutdownButton Selected")
    ShutdownButton.postUpdate("OFF")
    ShutdownCommand.sendCommand("ON")
end

rule "BackupButtonChanged"
when
  Item BackupButton received command ON
then
    logInfo("Default","BackupButton Selected")
    BackupButton.postUpdate("Backing up...")
    RestoreButton.postUpdate("")
    BackupCommand.sendCommand("ON")
end

rule "BackupCommandChanged"
when
  Item BackupCommand changed from ON to OFF
then
    logInfo("Default","Backup complete!")
    BackupButton.postUpdate("Backup complete!")
    BackupTimestampCommand.postUpdate(executeCommandLine("/home/pi/scripts/getbackuptimestamp.sh",10000));
    createTimer(now.plusSeconds(10)) [|
      BackupButton.postUpdate("")
    ]
end

rule "RestoreButtonChanged"
when
  Item RestoreButton received command ON
then
      if ((BackupTimestampCommand.state == NULL) || (BackupTimestampCommand.state == UNDEF)) {
        BackupTimestampCommand.postUpdate(executeCommandLine("/home/pi/scripts/getbackuptimestamp.sh",10000));
      } else if (BackupTimestampCommand.state == "No backup found.") {
        RestoreButton.postUpdate("No backup found.")
      } else {
      logInfo("Default","RestoreButton Selected")
      RestoreButton.postUpdate("Restoring & restarting twice...")
      RestoreButton.postUpdate(executeCommandLine("/home/pi/scripts/restore.sh",10000));
    }
end

rule "BackupTimestampCommand Changed"
when
  Item BackupTimestampCommand received command ON
then
  BackupTimestampCommand.postUpdate(executeCommandLine("/home/pi/scripts/getbackuptimestamp.sh",10000));
end

rule "GitInstalledVersion Changed"
when
  Item GitInstalledVersion received command ON
then
  GitInstalledVersion.postUpdate(executeCommandLine("/home/pi/scripts/getgitinstalledversion.sh",10000));
end

rule "GitLatestVersion Changed"
when
  Item GitLatestVersion received command ON
then
  GitLatestVersion.postUpdate("Checking GitHub...");
  GitLatestVersion.postUpdate(executeCommandLine("sudo /home/pi/scripts/getgitlatestversion.sh",10000));
end

rule "GitInstallLatestVersion Changed"
when
  Item GitInstallLatestVersion received command ON
then
  if (((GitInstalledVersion.state == NULL) || (GitInstalledVersion.state == UNDEF)) ||
  ((GitLatestVersion.state == NULL) || (GitLatestVersion.state == UNDEF)) ||
  (GitInstalledVersion.state.toString == GitLatestVersion.state.toString)) {
    GitInstalledVersion.postUpdate(executeCommandLine("/home/pi/scripts/getgitinstalledversion.sh",10000));
    GitLatestVersion.postUpdate(executeCommandLine("sudo /home/pi/scripts/getgitlatestversion.sh",10000));
  }
  if (GitInstalledVersion.state.toString == GitLatestVersion.state.toString){
    GitInstallLatestVersion.postUpdate("You have the latest version.");
    createTimer(now.plusSeconds(30)) [|
      GitInstallLatestVersion.postUpdate("")
    ]
  } else {
    GitInstallLatestVersion.postUpdate("Updating & restarting...");
    var String results = executeCommandLine("/home/pi/scripts/updateone.sh",30000)
    createTimer(now.plusSeconds(5)) [|
      GitInstallLatestVersion.postUpdate(results)
    ]
  }
end

rule "Monitor WAN IP"
when
    Item Network_WAN_IP changed
then
    // perform any action needed
    val currentState = Network_WAN_IP.state
    if (currentState == "-") {
        logError("MonitorWANIP", "Unable to get WAN IP")
    } else {
        logInfo("MonitorWANIP", "WAN IP changed to: " + currentState)
    }
end

// Update Settings Topics for LCD
rule "Network_WAN_IP updated"
when
    Item Network_WAN_IP received update
then
    Network_WAN_IP_Topic.sendCommand(Network_WAN_IP.state.toString);
end

rule "Network_WLAN_IP updated"
when
    Item Network_WLAN_IP received update
then
    Network_WLAN_IP_Topic.sendCommand(Network_WLAN_IP.state.toString);
end

rule "Network_SSID updated"
when
    Item Network_SSID received update
then
    Network_SSID_Topic.sendCommand(Network_SSID.state.toString);
end

rule "Network_WLAN_INFO updated"
when
    Item Network_WLAN_INFO received update
then
    Network_WLAN_INFO_Topic.sendCommand(Network_WLAN_INFO.state.toString);
end

rule "Network_WLAN_MAC updated"
when
    Item Network_WLAN_MAC received update
then
    Network_WLAN_MAC_Topic.sendCommand(Network_WLAN_MAC.state.toString);
end

rule "System_CPU_TEMP updated"
when
    Item System_CPU_TEMP received update
then
    System_CPU_TEMP_Topic.sendCommand(System_CPU_TEMP.state.toString);
end

rule "System_CPU_LOAD updated"
when
    Item System_CPU_LOAD received update
then
    System_CPU_LOAD_Topic.sendCommand(System_CPU_LOAD.state.toString);
end

rule "System_Used_Space updated"
when
    Item System_Used_Space received update
then
    System_Used_Space_Topic.sendCommand(System_Used_Space.state.toString);
end

rule "TempUnit updated"
when
    Item TempUnit received update
then
    TempUnit_Topic.sendCommand(TempUnit.state.toString);
end

rule "SystemType updated"
when
    Item SystemType received update
then
    SystemType_Topic.sendCommand(SystemType.state.toString);
end

rule "Heating2 updated"
when
    Item Heating2  received update
then
    Heating2Pin.sendCommand(OFF)
    Pin16.sendCommand(OFF);
end
