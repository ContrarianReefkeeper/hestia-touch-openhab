import org.openhab.model.script.actions.Timer

var Timer HeatingBoostTimer = null
var Timer HeatingBoostRemTime = null
var Number HeatingBoostTimeInitial = 10
var String HeatingPreviousMode = "OFF"

var Timer HotWaterBoostTimer = null
var Timer HotWaterBoostRemTime = null
var Number HotWaterBoostTimeInitial = null
var String HotWaterPreviousMode = "OFF"

var Timer HumiBoostTimer = null
var Timer HumiBoostRemTime = null
var Number HumiBoostTimeInitial = 10
var String HumiPreviousMode = "OFF"


rule "Initialisation"
when
    System started
then
    MainSwitch.sendCommand("OFF")
    HeatingMode.sendCommand("OFF")
    HotWaterMode.sendCommand("OFF")
    HumiMode.sendCommand("OFF")
    if(TempSetpoint.state == NULL) postUpdate(TempSetpoint, 70)
    if(TempSetpoint.state < 32) postUpdate(TempSetpoint, 70)
    if(HumiSetpoint.state == NULL) postUpdate(HumiSetpoint, 50)
    if(HeatingBoostTime.state == NULL) postUpdate(HeatingBoostTime, 10)
    if(HotWaterBoostTime.state == NULL) postUpdate(HotWaterBoostTime, 10)
    if(HumiBoostTime.state == NULL) postUpdate(HumiBoostTime, 10)
    TempSetpointChart.sendCommand(0);
    HumiSetpointChart.sendCommand(0);
    PreviousTempReading.sendCommand(0);
    PreviousHumiReading.sendCommand(0);
    chart_period.sendCommand(0);
end

rule "convertproxy"
when
  Item MyTemp changed or
  Item MyHumi changed
then
  MyTempProxy.postUpdate(Double::parseDouble(MyTemp.state.toString))
  MyHumiProxy.postUpdate(Double::parseDouble(MyHumi.state.toString))
  //if ((Double::parseDouble(MyTemp.state.toString) < (Double::parseDouble(PreviousTempReading.state.toString)) - 1) || (Double::parseDouble(MyTemp.state.toString) > (Double::parseDouble(PreviousTempReading.state.toString)) + 1)) {
    PreviousTempReading.postUpdate(Double::parseDouble(MyTemp.state.toString))
  //}
  if ((Double::parseDouble(MyHumi.state.toString) < (Double::parseDouble(PreviousHumiReading.state.toString)) - 0.4) || (Double::parseDouble(MyHumi.state.toString) > (Double::parseDouble(PreviousHumiReading.state.toString)) + 0.4)) {
    PreviousHumiReading.postUpdate(Double::parseDouble(MyHumi.state.toString))
  }
end

rule "SetTempSetpointInc"
  when
      Item IncTargetTemp changed
  then
    var Number setpoint = TempSetpoint.state as DecimalType
    setpoint = setpoint + 1
    TempSetpoint.sendCommand(setpoint) //postUpdate(TempSetpoint, setpoint)
    TempSetpointChart.sendCommand(setpoint)
end

rule "SetTempSetpointDec"
  when
      Item DecTargetTemp changed
  then
    var Number setpoint = TempSetpoint.state as DecimalType
    setpoint = setpoint - 1
    TempSetpoint.sendCommand(setpoint) //postUpdate(TempSetpoint, setpoint)
    TempSetpointChart.sendCommand(setpoint)
end

rule "checkcurrtemp"
when
  Item TempSetpoint changed or
  Item PreviousTempReading changed
then
  if (MyTempProxy.state > TempSetpoint.state){
    Raspi23.sendCommand(OFF)
    TempSetpointChart.sendCommand(0)
  } else if ((MyTempProxy.state < TempSetpoint.state) &&
      ((HeatingMode.state=="ON") || (HeatingMode.state=="Boost"))) {
    Raspi23.sendCommand(ON)
    TempSetpointChart.sendCommand(TempSetpoint.state)
  }
end

rule "SetHumiSetpointInc"
when
    Item IncTargetHumi changed
then
  var Number setpoint = HumiSetpoint.state as DecimalType
  setpoint = setpoint + 5
  HumiSetpoint.sendCommand(setpoint)
  HumiSetpointChart.sendCommand(setpoint)
end

rule "SetHumiSetpointDec"
when
    Item DecTargetHumi changed
then
  var Number setpoint = HumiSetpoint.state as DecimalType
  setpoint = setpoint - 5
  HumiSetpoint.sendCommand(setpoint)
  HumiSetpointChart.sendCommand(setpoint)
end

rule "checkcurrhumi"
when
  Item HumiSetpoint changed or
  Item PreviousHumiReading changed
then
  if (MyHumiProxy.state < HumiSetpoint.state){
    Raspi18.sendCommand(OFF)
    HumiSetpointChart.sendCommand(0)
  } else if ((MyHumiProxy.state > HumiSetpoint.state) &&
      ((HumiMode.state=="ON") || (HumiMode.state=="Boost"))) {
    Raspi18.sendCommand(ON)
    HumiSetpointChart.sendCommand(HumiSetpoint.state)
  }
end

rule "Heating Mode"
when
    Item HeatingMode changed
then
    switch(HeatingMode.state) {
      case "ON": {
        if (MyTempProxy.state < TempSetpoint.state) {
          Raspi23.sendCommand(ON)
          TempSetpointChart.sendCommand(TempSetpoint.state)
        }
        MainSwitch.sendCommand("ON")
        HeatingPreviousMode="ON"
      }
      case "OFF": {
        Raspi23.sendCommand(OFF)
        TempSetpointChart.sendCommand(0)
        HeatingPreviousMode="OFF"
      }
      case "Schedule": {
        Raspi23.sendCommand(OFF)
        TempSetpointChart.sendCommand(0)
        MainSwitch.sendCommand("ON")
        HeatingPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

rule "Hot Water Mode"
when
    Item HotWaterMode changed
then
    switch(HotWaterMode.state) {
      case "ON": {
        Raspi12.sendCommand(ON)
        MainSwitch.sendCommand("ON")
        HotWaterPreviousMode="ON"
      }
      case "OFF": {
        Raspi12.sendCommand(OFF)
        HotWaterPreviousMode="OFF"
      }
      case "Schedule": {
        Raspi12.sendCommand(OFF)
        MainSwitch.sendCommand("ON")
        HotWaterPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

rule "Humidity Mode"
when
    Item HumiMode changed
then
    switch(HumiMode.state) {
      case "ON": {
        if (MyHumiProxy.state > HumiSetpoint.state) {
          Raspi18.sendCommand(ON)
          HumiSetpointChart.sendCommand(TempSetpoint.state)
        }
        MainSwitch.sendCommand("ON")
        HumiPreviousMode="ON"
      }
      case "OFF": {
        Raspi18.sendCommand(OFF)
        HumiSetpointChart.sendCommand(0)
        HumiPreviousMode="OFF"
      }
      case "Schedule": {
        Raspi18.sendCommand(OFF)
        HumiSetpointChart.sendCommand(0)
        MainSwitch.sendCommand("ON")
        HumiPreviousMode="Schedule"
      }
      case "Boost": {
        MainSwitch.sendCommand("ON")
        // See below more...
      }
    }
end

rule "MainSwitch"
when
    Item MainSwitch changed
then
    switch(MainSwitch.state) {
      case ON:{
        // Do nothing
      }
      case OFF:{
        if (HeatingMode.state == "ON") {
          HeatingPreviousMode = "ON"
          HeatingMode.sendCommand("OFF")
        } else if (HeatingMode.state == "Schedule") {
          HeatingPreviousMode="Schedule"
          HeatingMode.sendCommand("OFF")
        } else if (HeatingMode.state == "Boost") {
          //This should never execute
          HeatingPreviousMode="Boost"
          HeatingMode.sendCommand("OFF")
        }

        if (HotWaterMode.state == "ON") {
          HotWaterPreviousMode="ON"
          HotWaterMode.sendCommand("OFF")
        } else if (HotWaterMode.state == "Schedule") {
          HotWaterPreviousMode="Schedule"
          HotWaterMode.sendCommand("OFF")
        } else if (HotWaterMode.state == "Boost") {
          //This should never execute
          HotWaterPreviousMode="Boost"
          HotWaterMode.sendCommand("OFF")
        }
        
        if (HumiMode.state == "ON") {
          HumiPreviousMode = "ON"
          HumiMode.sendCommand("OFF")
        } else if (HumiMode.state == "Schedule") {
          HumiPreviousMode="Schedule"
          HumiMode.sendCommand("OFF")
        } else if (HumiMode.state == "Boost") {
          //This should never execute
          HumiPreviousMode="Boost"
          HumiMode.sendCommand("OFF")
        }
      }
    }
end

rule "Boost Heating"
when
    Item HeatingMode changed to Boost
then
    if ((HeatingBoostTime.state as DecimalType).intValue < 10) {
      HeatingBoostTimeInitial = 10
    }
    HeatingBoostTime.sendCommand(HeatingBoostTimeInitial)
    if (HeatingBoostTimer != null) {
      HeatingBoostTimer.cancel
      HeatingBoostTimer = null   // reset the timer
    }
    if (HeatingBoostRemTime != null) {
      HeatingBoostRemTime.cancel
      HeatingBoostRemTime = null   // reset the timer
    }
    //HeatingBoostTimeInitial = (HeatingBoostTime.state as DecimalType).intValue;
    if (MyTempProxy.state > TempSetpoint.state){
      Raspi23.sendCommand(OFF)
      TempSetpointChart.sendCommand(0)
    } else if (MyTempProxy.state < TempSetpoint.state) {
      Raspi23.sendCommand(ON)
      TempSetpointChart.sendCommand(TempSetpoint.state)
    }

    logInfo("Default","Setting heating timer to " + (HeatingBoostTime.state as DecimalType).intValue)
    HeatingBoostTimer = createTimer(now.plusMinutes(HeatingBoostTimeInitial)) [|
        HeatingMode.sendCommand(HeatingPreviousMode)
        HeatingBoostTimer = null   // reset the timer
    ]

    HeatingBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HeatingBoostTime.sendCommand((HeatingBoostTime.state as DecimalType).intValue -1)
        HeatingBoostRemTime.reschedule(now.plusMinutes(1))
    ]
end

rule "Boost Heating Ended"
when
    Item HeatingMode changed from Boost
then
    logInfo("Default","Heating Boost finished")
    if ((HeatingBoostTime.state as DecimalType).intValue < 10) {
      HeatingBoostTimeInitial = 10
    }
    HeatingBoostTime.sendCommand(HeatingBoostTimeInitial)

    logInfo("Timer", "Clearing Heating timers...")
    if (HeatingBoostTimer != null) {
      HeatingBoostTimer.cancel()
      HeatingBoostTimer = null
      logInfo("Timer", "HeatingBoostTimer cleared")
    }

    if (HeatingBoostRemTime != null) {
      HeatingBoostRemTime.cancel()
      HeatingBoostRemTime = null
      logInfo("Timer", "HeatingBoostRemTime cleared")
    }
end

rule "Boost Hot Water"
when
    Item HotWaterMode changed to Boost
then
    HotWaterBoostTimeInitial = (HotWaterBoostTime.state as DecimalType).intValue;
    Raspi12.sendCommand(ON)

    logInfo("Default","Setting hot water timer to " + (HotWaterBoostTime.state as DecimalType).intValue)
    HotWaterBoostTimer = createTimer(now.plusMinutes(HotWaterBoostTimeInitial)) [|
        HotWaterMode.sendCommand(HotWaterPreviousMode)
        HotWaterBoostTimer = null   // reset the timer
    ]

    HotWaterBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HotWaterBoostTime.sendCommand((HotWaterBoostTime.state as DecimalType).intValue -1)
        HotWaterBoostRemTime.reschedule(now.plusMinutes(1))
    ]
end

rule "Boost Hot Water Ended"
when
    Item HotWaterMode changed from Boost
then
    logInfo("Default","Hot Water Boost finished")
    if ((HotWaterBoostTime.state as DecimalType).intValue < 10) {
      HotWaterBoostTimeInitial = 10
    }
    HotWaterBoostTime.sendCommand(HotWaterBoostTimeInitial)

    logInfo("Timer", "Clearing Hot Water timers...")
    if (HotWaterBoostTimer != null) {
      HotWaterBoostTimer.cancel()
      HotWaterBoostTimer = null
      logInfo("Timer", "HotWaterBoostTimer cleared")
    }

    if (HotWaterBoostRemTime != null) {
      HotWaterBoostRemTime.cancel()
      HotWaterBoostRemTime = null
      logInfo("Timer", "HotWaterBoostRemTime cleared")
    }
end

rule "Boost Humidity"
when
    Item HumiMode changed to Boost
then
    if ((HumiBoostTime.state as DecimalType).intValue < 10) {
      HumiBoostTimeInitial = 10
    }
    HumidityBoostTime.sendCommand(HumiBoostTimeInitial)
    if (HumiBoostTimer != null) {
      HumiBoostTimer.cancel
      HumiBoostTimer = null   // reset the timer
    }
    if (HumiBoostRemTime != null) {
      HumiBoostRemTime.cancel
      HumiBoostRemTime = null   // reset the timer
    }
    HumiBoostTimeInitial = (HumiBoostTime.state as DecimalType).intValue;
    if (MyHumiProxy.state < HumiSetpoint.state){
      Raspi18.sendCommand(OFF)
      HumiSetpointChart.sendCommand(0)
    } else if (MyHumiProxy.state > HumiSetpoint.state) {
      Raspi18.sendCommand(ON)
      HumiSetpointChart.sendCommand(TempSetpoint.state)
    }

    logInfo("Default","Setting humidity timer to " + (HumiBoostTime.state as DecimalType).intValue)
    HumiBoostTimer = createTimer(now.plusMinutes(HumiBoostTimeInitial)) [|
        HumiMode.sendCommand(HumiPreviousMode)
        HumiBoostTimer = null   // reset the timer
    ]

    HumiBoostRemTime = createTimer(now.plusMinutes(1)) [|
        HumiBoostTime.sendCommand((HumiBoostTime.state as DecimalType).intValue -1)
        HumiBoostRemTime.reschedule(now.plusMinutes(1))
    ]
end

rule "Boost Humidity Ended"
when
    Item HumiMode changed from Boost
then
    logInfo("Default","Humidity Boost finished")
    if ((HumiBoostTime.state as DecimalType).intValue < 10) {
      HumiBoostTimeInitial = 10
    }
    HumiBoostTime.sendCommand(HumiBoostTimeInitial)

    logInfo("Timer", "Clearing Humidity timers...")
    if (HumiBoostTimer != null) {
      HumiBoostTimer.cancel()
      HumiBoostTimer = null
      logInfo("Timer", "HumiBoostTimer cleared")
    }

    if (HumiBoostRemTime != null) {
      HumiBoostRemTime.cancel()
      HumiBoostRemTime = null
      logInfo("Timer", "HumiBoostRemTime cleared")
    }
end

rule "HeatingBoostTimeDec"
when
    Item HeatingBoostTimeDec changed
then
  if (HeatingBoostTimeInitial > 19) {
    HeatingBoostTimeInitial = HeatingBoostTimeInitial - 10
    if (HeatingMode.state == "Boost") {
      if (HeatingBoostTimer != null) {
        HeatingBoostTimer.reschedule(now.plusMinutes((HeatingBoostTimeInitial).intValue))
      }
      if (HeatingBoostRemTime != null) {
        HeatingBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HeatingBoostTime.state as DecimalType).intValue) > 20) {
    HeatingBoostTime.postUpdate(((HeatingBoostTime.state as DecimalType).intValue) - 10)
  }
end

rule "HeatingBoostTimeInc"
when
    Item HeatingBoostTimeInc changed
then
  if (HeatingBoostTimeInitial < 1440) {
    HeatingBoostTimeInitial = HeatingBoostTimeInitial + 10
    if (HeatingMode.state == "Boost") {
      if (HeatingBoostTimer != null) {
        HeatingBoostTimer.reschedule(now.plusMinutes((HeatingBoostTimeInitial).intValue))
      }
      if (HeatingBoostRemTime != null) {
        HeatingBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HeatingBoostTime.state as DecimalType).intValue) < 1440) {
    HeatingBoostTime.postUpdate(((HeatingBoostTime.state as DecimalType).intValue) + 10)
  }
end

rule "HotWaterBoostTimeDec"
when
    Item HotWaterBoostTimeDec changed
then
  if (HotWaterBoostTimeInitial > 19) {
    HotWaterBoostTimeInitial = HotWaterBoostTimeInitial - 10
    if (HotWaterMode.state == "Boost") {
      if (HotWaterBoostTimer != null) {
        HotWaterBoostTimer.reschedule(now.plusMinutes((HotWaterBoostTimeInitial).intValue))
      }
      if (HotWaterBoostRemTime != null) {
        HotWaterBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HotWaterBoostTime.state as DecimalType).intValue) > 10) {
    HotWaterBoostTime.postUpdate(((HotWaterBoostTime.state as DecimalType).intValue) - 10)
  }
end

rule "HotWaterBoostTimeInc"
when
    Item HotWaterBoostTimeInc changed
then
  if (HotWaterBoostTimeInitial < 120) {
    HotWaterBoostTimeInitial = HotWaterBoostTimeInitial + 10
    if (HotWaterMode.state == "Boost") {
      if (HotWaterBoostTimer != null) {
        HotWaterBoostTimer.reschedule(now.plusMinutes((HotWaterBoostTimeInitial).intValue))
      }
      if (HotWaterBoostRemTime != null) {
        HotWaterBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HotWaterBoostTime.state as DecimalType).intValue) < 120) {
    HotWaterBoostTime.postUpdate(((HotWaterBoostTime.state as DecimalType).intValue) + 10)
  }
end

rule "HumiBoostTimeDec"
when
    Item HumiBoostTimeDec changed
then
  if (HumiBoostTimeInitial > 19) {
    HumiBoostTimeInitial = HumiBoostTimeInitial - 10
    if (HumiMode.state == "Boost") {
      if (HumiBoostTimer != null) {
        HumiBoostTimer.reschedule(now.plusMinutes((HumiBoostTimeInitial).intValue))
      }
      if (HumiBoostRemTime != null) {
        HumiBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HumiBoostTime.state as DecimalType).intValue) > 20) {
    HumiBoostTime.postUpdate(((HumiBoostTime.state as DecimalType).intValue) - 10)
  }
end

rule "HumiBoostTimeInc"
when
    Item HumiBoostTimeInc changed
then
  if (HumiBoostTimeInitial < 1440) {
    HumiBoostTimeInitial = HumiBoostTimeInitial + 10
    if (HumiMode.state == "Boost") {
      if (HumiBoostTimer != null) {
        HumiBoostTimer.reschedule(now.plusMinutes((HumiBoostTimeInitial).intValue))
      }
      if (HumiBoostRemTime != null) {
        HumiBoostRemTime.reschedule(now.plusMinutes(1))
      }
    }
  }

  if (((HumiBoostTime.state as DecimalType).intValue) < 1440) {
    HumiBoostTime.postUpdate(((HumiBoostTime.state as DecimalType).intValue) + 10)
  }
end
